package generated;
import com.sun.jna.Callback;
import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.Pointer;
import com.sun.jna.ptr.DoubleByReference;
import com.sun.jna.ptr.IntByReference;
import com.sun.jna.ptr.PointerByReference;

import java.nio.ByteBuffer;
import java.nio.DoubleBuffer;
import java.nio.IntBuffer;
/**
 * JNA Wrapper for library <b>datachannel</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface DatachannelLibrary extends Library {
	public static final String JNA_LIBRARY_NAME = "datachannel";
	public static final NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(DatachannelLibrary.JNA_LIBRARY_NAME);
	public static final DatachannelLibrary INSTANCE = (DatachannelLibrary)Native.loadLibrary(DatachannelLibrary.JNA_LIBRARY_NAME, DatachannelLibrary.class);
	/**
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:8</i><br>
	 * enum values
	 */
	public static interface rtcState {
		/** <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:2</i> */
		public static final int RTC_NEW = 0;
		/** <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:3</i> */
		public static final int RTC_CONNECTING = 1;
		/** <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:4</i> */
		public static final int RTC_CONNECTED = 2;
		/** <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:5</i> */
		public static final int RTC_DISCONNECTED = 3;
		/** <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:6</i> */
		public static final int RTC_FAILED = 4;
		/** <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:7</i> */
		public static final int RTC_CLOSED = 5;
	};
	/**
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:17</i><br>
	 * enum values
	 */
	public static interface rtcIceState {
		/** <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:10</i> */
		public static final int RTC_ICE_NEW = 0;
		/** <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:11</i> */
		public static final int RTC_ICE_CHECKING = 1;
		/** <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:12</i> */
		public static final int RTC_ICE_CONNECTED = 2;
		/** <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:13</i> */
		public static final int RTC_ICE_COMPLETED = 3;
		/** <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:14</i> */
		public static final int RTC_ICE_FAILED = 4;
		/** <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:15</i> */
		public static final int RTC_ICE_DISCONNECTED = 5;
		/** <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:16</i> */
		public static final int RTC_ICE_CLOSED = 6;
	};
	/**
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:22</i><br>
	 * enum values
	 */
	public static interface rtcGatheringState {
		/** <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:19</i> */
		public static final int RTC_GATHERING_NEW = 0;
		/** <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:20</i> */
		public static final int RTC_GATHERING_INPROGRESS = 1;
		/** <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:21</i> */
		public static final int RTC_GATHERING_COMPLETE = 2;
	};
	/**
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:29</i><br>
	 * enum values
	 */
	public static interface rtcSignalingState {
		/** <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:24</i> */
		public static final int RTC_SIGNALING_STABLE = 0;
		/** <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:25</i> */
		public static final int RTC_SIGNALING_HAVE_LOCAL_OFFER = 1;
		/** <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:26</i> */
		public static final int RTC_SIGNALING_HAVE_REMOTE_OFFER = 2;
		/** <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:27</i> */
		public static final int RTC_SIGNALING_HAVE_LOCAL_PRANSWER = 3;
		/** <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:28</i> */
		public static final int RTC_SIGNALING_HAVE_REMOTE_PRANSWER = 4;
	};
	/**
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:38</i><br>
	 * enum values
	 */
	public static interface rtcLogLevel {
		/** <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:31</i> */
		public static final int RTC_LOG_NONE = 0;
		/** <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:32</i> */
		public static final int RTC_LOG_FATAL = 1;
		/** <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:33</i> */
		public static final int RTC_LOG_ERROR = 2;
		/** <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:34</i> */
		public static final int RTC_LOG_WARNING = 3;
		/** <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:35</i> */
		public static final int RTC_LOG_INFO = 4;
		/** <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:36</i> */
		public static final int RTC_LOG_DEBUG = 5;
		/** <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:37</i> */
		public static final int RTC_LOG_VERBOSE = 6;
	};
	/**
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:44</i><br>
	 * enum values
	 */
	public static interface rtcCertificateType {
		/**
		 * ECDSA<br>
		 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:41</i>
		 */
		public static final int RTC_CERTIFICATE_DEFAULT = 0;
		/** <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:42</i> */
		public static final int RTC_CERTIFICATE_ECDSA = 1;
		/** <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:43</i> */
		public static final int RTC_CERTIFICATE_RSA = 2;
	};
	/**
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:55</i><br>
	 * enum values
	 */
	public static interface rtcCodec {
		/** <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:46</i> */
		public static final int RTC_CODEC_H264 = 0;
		/** <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:47</i> */
		public static final int RTC_CODEC_VP8 = 1;
		/** <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:48</i> */
		public static final int RTC_CODEC_VP9 = 2;
		/** <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:49</i> */
		public static final int RTC_CODEC_H265 = 3;
		/** <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:50</i> */
		public static final int RTC_CODEC_AV1 = 4;
		/** <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:51</i> */
		public static final int RTC_CODEC_OPUS = 128;
		/** <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:52</i> */
		public static final int RTC_CODEC_PCMU = 129;
		/** <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:53</i> */
		public static final int RTC_CODEC_PCMA = 130;
		/** <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:54</i> */
		public static final int RTC_CODEC_AAC = 131;
	};
	/**
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:62</i><br>
	 * enum values
	 */
	public static interface rtcDirection {
		/** <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:57</i> */
		public static final int RTC_DIRECTION_UNKNOWN = 0;
		/** <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:58</i> */
		public static final int RTC_DIRECTION_SENDONLY = 1;
		/** <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:59</i> */
		public static final int RTC_DIRECTION_RECVONLY = 2;
		/** <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:60</i> */
		public static final int RTC_DIRECTION_SENDRECV = 3;
		/** <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:61</i> */
		public static final int RTC_DIRECTION_INACTIVE = 4;
	};
	/**
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:66</i><br>
	 * enum values
	 */
	public static interface rtcTransportPolicy {
		/** <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:64</i> */
		public static final int RTC_TRANSPORT_POLICY_ALL = 0;
		/** <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:65</i> */
		public static final int RTC_TRANSPORT_POLICY_RELAY = 1;
	};
	/**
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:289</i><br>
	 * enum values
	 */
	public static interface rtcObuPacketization {
		/** <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:287</i> */
		public static final int RTC_OBU_PACKETIZED_OBU = 0;
		/** <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:288</i> */
		public static final int RTC_OBU_PACKETIZED_TEMPORAL_UNIT = 1;
	};
	/**
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:300</i><br>
	 * enum values
	 */
	public static interface rtcNalUnitSeparator {
		/**
		 * first 4 bytes are NAL unit length<br>
		 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:293</i>
		 */
		public static final int RTC_NAL_SEPARATOR_LENGTH = 0;
		/**
		 * 0x00, 0x00, 0x00, 0x01<br>
		 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:295</i>
		 */
		public static final int RTC_NAL_SEPARATOR_LONG_START_SEQUENCE = 1;
		/**
		 * 0x00, 0x00, 0x01<br>
		 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:297</i>
		 */
		public static final int RTC_NAL_SEPARATOR_SHORT_START_SEQUENCE = 2;
		/**
		 * long or short start sequence<br>
		 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:299</i>
		 */
		public static final int RTC_NAL_SEPARATOR_START_SEQUENCE = 3;
	};
	/** <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/version.h</i> */
	public static final int RTC_VERSION_MAJOR = (int)0;
	/** <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/version.h</i> */
	public static final int RTC_VERSION_MINOR = (int)21;
	/** <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/version.h</i> */
	public static final int RTC_VERSION_PATCH = (int)1;
	/** <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/version.h</i> */
	public static final String RTC_VERSION = (String)"0.21.1";
	/** <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h</i> */
	public static final int RTC_ENABLE_WEBSOCKET = (int)1;
	/** <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h</i> */
	public static final int RTC_ENABLE_MEDIA = (int)1;
	/** <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h</i> */
	public static final int RTC_DEFAULT_MTU = (int)1280;
	/** <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h</i> */
	public static final short RTC_DEFAULT_MAX_FRAGMENT_SIZE = (short)(1280 - 12 - 8 - 40);
	/** <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h</i> */
	public static final int RTC_DEFAULT_MAX_STORED_PACKET_COUNT = (int)512;
	/** <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h</i> */
	public static final short RTC_DEFAULT_MAXIMUM_FRAGMENT_SIZE = (short)(1280 - 12 - 8 - 40);
	/** <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h</i> */
	public static final int RTC_DEFAULT_MAXIMUM_PACKET_COUNT_FOR_NACK_CACHE = (int)512;
	/** <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h</i> */
	public static final int RTC_ERR_SUCCESS = (int)0;
	/** <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h</i> */
	public static final int RTC_ERR_INVALID = (int)-1;
	/** <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h</i> */
	public static final int RTC_ERR_FAILURE = (int)-2;
	/** <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h</i> */
	public static final int RTC_ERR_NOT_AVAIL = (int)-3;
	/** <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h</i> */
	public static final int RTC_ERR_TOO_SMALL = (int)-4;
	/** <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:67</i> */
	public interface rtcLogCallbackFunc extends Callback {
		void apply(int level, Pointer message);
	};
	/** <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:68</i> */
	public interface rtcDescriptionCallbackFunc extends Callback {
		void apply(int pc, Pointer sdp, Pointer type, Pointer ptr);
	};
	/** <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:69</i> */
	public interface rtcCandidateCallbackFunc extends Callback {
		void apply(int pc, Pointer cand, Pointer mid, Pointer ptr);
	};
	/** <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:70</i> */
	public interface rtcStateChangeCallbackFunc extends Callback {
		void apply(int pc, int state, Pointer ptr);
	};
	/** <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:71</i> */
	public interface rtcIceStateChangeCallbackFunc extends Callback {
		void apply(int pc, int state, Pointer ptr);
	};
	/** <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:72</i> */
	public interface rtcGatheringStateCallbackFunc extends Callback {
		void apply(int pc, int state, Pointer ptr);
	};
	/** <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:73</i> */
	public interface rtcSignalingStateCallbackFunc extends Callback {
		void apply(int pc, int state, Pointer ptr);
	};
	/** <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:74</i> */
	public interface rtcDataChannelCallbackFunc extends Callback {
		void apply(int pc, int dc, Pointer ptr);
	};
	/** <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:75</i> */
	public interface rtcTrackCallbackFunc extends Callback {
		void apply(int pc, int tr, Pointer ptr);
	};
	/** <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:76</i> */
	public interface rtcOpenCallbackFunc extends Callback {
		void apply(int id, Pointer ptr);
	};
	/** <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:77</i> */
	public interface rtcClosedCallbackFunc extends Callback {
		void apply(int id, Pointer ptr);
	};
	/** <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:78</i> */
	public interface rtcErrorCallbackFunc extends Callback {
		void apply(int id, Pointer error, Pointer ptr);
	};
	/** <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:79</i> */
	public interface rtcMessageCallbackFunc extends Callback {
		void apply(int id, Pointer message, int size, Pointer ptr);
	};
	/** <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:80</i> */
	public interface rtcInterceptorCallbackFunc extends Callback {
		Pointer apply(int pc, Pointer message, int size, Pointer ptr);
	};
	/** <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:81</i> */
	public interface rtcBufferedAmountLowCallbackFunc extends Callback {
		void apply(int id, Pointer ptr);
	};
	/** <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:82</i> */
	public interface rtcAvailableCallbackFunc extends Callback {
		void apply(int id, Pointer ptr);
	};
	/** <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:83</i> */
	public interface rtcPliHandlerCallbackFunc extends Callback {
		void apply(int tr, Pointer ptr);
	};
	/** <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:485</i> */
	public interface rtcWebSocketClientCallbackFunc extends Callback {
		void apply(int wsserver, int ws, Pointer ptr);
	};
	/**
	 * NULL cb on the first call will log to stdout<br>
	 * Original signature : <code>void rtcInitLogger(rtcLogLevel, rtcLogCallbackFunc)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:88</i>
	 */
	void rtcInitLogger(int level, rtcLogCallbackFunc cb);
	/**
	 * User pointer<br>
	 * Original signature : <code>void rtcSetUserPointer(int, void*)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:93</i>
	 */
	void rtcSetUserPointer(int id, Pointer ptr);
	/**
	 * Original signature : <code>void* rtcGetUserPointer(int)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:95</i>
	 */
	Pointer rtcGetUserPointer(int i);
	/**
	 * returns pc id<br>
	 * Original signature : <code>int rtcCreatePeerConnection(const rtcConfiguration*)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:125</i>
	 */
	int rtcCreatePeerConnection(rtcConfiguration config);
	/**
	 * Original signature : <code>int rtcClosePeerConnection(int)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:127</i>
	 */
	int rtcClosePeerConnection(int pc);
	/**
	 * Original signature : <code>int rtcDeletePeerConnection(int)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:129</i>
	 */
	int rtcDeletePeerConnection(int pc);
	/**
	 * Original signature : <code>int rtcSetLocalDescriptionCallback(int, rtcDescriptionCallbackFunc)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:131</i>
	 */
	int rtcSetLocalDescriptionCallback(int pc, rtcDescriptionCallbackFunc cb);
	/**
	 * Original signature : <code>int rtcSetLocalCandidateCallback(int, rtcCandidateCallbackFunc)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:133</i>
	 */
	int rtcSetLocalCandidateCallback(int pc, rtcCandidateCallbackFunc cb);
	/**
	 * Original signature : <code>int rtcSetStateChangeCallback(int, rtcStateChangeCallbackFunc)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:135</i>
	 */
	int rtcSetStateChangeCallback(int pc, rtcStateChangeCallbackFunc cb);
	/**
	 * Original signature : <code>int rtcSetIceStateChangeCallback(int, rtcIceStateChangeCallbackFunc)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:137</i>
	 */
	int rtcSetIceStateChangeCallback(int pc, rtcIceStateChangeCallbackFunc cb);
	/**
	 * Original signature : <code>int rtcSetGatheringStateChangeCallback(int, rtcGatheringStateCallbackFunc)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:139</i>
	 */
	int rtcSetGatheringStateChangeCallback(int pc, rtcGatheringStateCallbackFunc cb);
	/**
	 * Original signature : <code>int rtcSetSignalingStateChangeCallback(int, rtcSignalingStateCallbackFunc)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:141</i>
	 */
	int rtcSetSignalingStateChangeCallback(int pc, rtcSignalingStateCallbackFunc cb);
	/**
	 * Original signature : <code>int rtcSetLocalDescription(int, const char*)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:143</i><br>
	 * @deprecated use the safer methods {@link #rtcSetLocalDescription(int, String)} and {@link #rtcSetLocalDescription(int, Pointer)} instead
	 */
	@Deprecated 
	int rtcSetLocalDescription(int pc, Pointer type);
	/**
	 * Original signature : <code>int rtcSetLocalDescription(int, const char*)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:143</i>
	 */
	int rtcSetLocalDescription(int pc, String type);
	/**
	 * Original signature : <code>int rtcSetRemoteDescription(int, const char*, const char*)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:145</i><br>
	 * @deprecated use the safer methods {@link #rtcSetRemoteDescription(int, String, String)} and {@link #rtcSetRemoteDescription(int, Pointer, Pointer)} instead
	 */
	@Deprecated 
	int rtcSetRemoteDescription(int pc, Pointer sdp, Pointer type);
	/**
	 * Original signature : <code>int rtcSetRemoteDescription(int, const char*, const char*)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:145</i>
	 */
	int rtcSetRemoteDescription(int pc, String sdp, String type);
	/**
	 * Original signature : <code>int rtcAddRemoteCandidate(int, const char*, const char*)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:147</i><br>
	 * @deprecated use the safer methods {@link #rtcAddRemoteCandidate(int, String, String)} and {@link #rtcAddRemoteCandidate(int, Pointer, Pointer)} instead
	 */
	@Deprecated 
	int rtcAddRemoteCandidate(int pc, Pointer cand, Pointer mid);
	/**
	 * Original signature : <code>int rtcAddRemoteCandidate(int, const char*, const char*)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:147</i>
	 */
	int rtcAddRemoteCandidate(int pc, String cand, String mid);
	/**
	 * Original signature : <code>int rtcGetLocalDescription(int, char*, int)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:149</i><br>
	 * @deprecated use the safer methods {@link #rtcGetLocalDescription(int, ByteBuffer, int)} and {@link #rtcGetLocalDescription(int, Pointer, int)} instead
	 */
	@Deprecated 
	int rtcGetLocalDescription(int pc, Pointer buffer, int size);
	/**
	 * Original signature : <code>int rtcGetLocalDescription(int, char*, int)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:149</i>
	 */
	int rtcGetLocalDescription(int pc, ByteBuffer buffer, int size);
	/**
	 * Original signature : <code>int rtcGetRemoteDescription(int, char*, int)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:151</i><br>
	 * @deprecated use the safer methods {@link #rtcGetRemoteDescription(int, ByteBuffer, int)} and {@link #rtcGetRemoteDescription(int, Pointer, int)} instead
	 */
	@Deprecated 
	int rtcGetRemoteDescription(int pc, Pointer buffer, int size);
	/**
	 * Original signature : <code>int rtcGetRemoteDescription(int, char*, int)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:151</i>
	 */
	int rtcGetRemoteDescription(int pc, ByteBuffer buffer, int size);
	/**
	 * Original signature : <code>int rtcGetLocalDescriptionType(int, char*, int)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:153</i><br>
	 * @deprecated use the safer methods {@link #rtcGetLocalDescriptionType(int, ByteBuffer, int)} and {@link #rtcGetLocalDescriptionType(int, Pointer, int)} instead
	 */
	@Deprecated 
	int rtcGetLocalDescriptionType(int pc, Pointer buffer, int size);
	/**
	 * Original signature : <code>int rtcGetLocalDescriptionType(int, char*, int)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:153</i>
	 */
	int rtcGetLocalDescriptionType(int pc, ByteBuffer buffer, int size);
	/**
	 * Original signature : <code>int rtcGetRemoteDescriptionType(int, char*, int)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:155</i><br>
	 * @deprecated use the safer methods {@link #rtcGetRemoteDescriptionType(int, ByteBuffer, int)} and {@link #rtcGetRemoteDescriptionType(int, Pointer, int)} instead
	 */
	@Deprecated 
	int rtcGetRemoteDescriptionType(int pc, Pointer buffer, int size);
	/**
	 * Original signature : <code>int rtcGetRemoteDescriptionType(int, char*, int)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:155</i>
	 */
	int rtcGetRemoteDescriptionType(int pc, ByteBuffer buffer, int size);
	/**
	 * Original signature : <code>int rtcGetLocalAddress(int, char*, int)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:157</i><br>
	 * @deprecated use the safer methods {@link #rtcGetLocalAddress(int, ByteBuffer, int)} and {@link #rtcGetLocalAddress(int, Pointer, int)} instead
	 */
	@Deprecated 
	int rtcGetLocalAddress(int pc, Pointer buffer, int size);
	/**
	 * Original signature : <code>int rtcGetLocalAddress(int, char*, int)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:157</i>
	 */
	int rtcGetLocalAddress(int pc, ByteBuffer buffer, int size);
	/**
	 * Original signature : <code>int rtcGetRemoteAddress(int, char*, int)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:159</i><br>
	 * @deprecated use the safer methods {@link #rtcGetRemoteAddress(int, ByteBuffer, int)} and {@link #rtcGetRemoteAddress(int, Pointer, int)} instead
	 */
	@Deprecated 
	int rtcGetRemoteAddress(int pc, Pointer buffer, int size);
	/**
	 * Original signature : <code>int rtcGetRemoteAddress(int, char*, int)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:159</i>
	 */
	int rtcGetRemoteAddress(int pc, ByteBuffer buffer, int size);
	/**
	 * Original signature : <code>int rtcGetSelectedCandidatePair(int, char*, int, char*, int)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:161</i><br>
	 * @deprecated use the safer methods {@link #rtcGetSelectedCandidatePair(int, ByteBuffer, int, ByteBuffer, int)} and {@link #rtcGetSelectedCandidatePair(int, Pointer, int, Pointer, int)} instead
	 */
	@Deprecated 
	int rtcGetSelectedCandidatePair(int pc, Pointer local, int localSize, Pointer remote, int remoteSize);
	/**
	 * Original signature : <code>int rtcGetSelectedCandidatePair(int, char*, int, char*, int)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:161</i>
	 */
	int rtcGetSelectedCandidatePair(int pc, ByteBuffer local, int localSize, ByteBuffer remote, int remoteSize);
	/**
	 * Original signature : <code>int rtcGetMaxDataChannelStream(int)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:163</i>
	 */
	int rtcGetMaxDataChannelStream(int pc);
	/**
	 * Original signature : <code>int rtcGetRemoteMaxMessageSize(int)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:165</i>
	 */
	int rtcGetRemoteMaxMessageSize(int pc);
	/**
	 * DataChannel, Track, and WebSocket common API<br>
	 * Original signature : <code>int rtcSetOpenCallback(int, rtcOpenCallbackFunc)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:170</i>
	 */
	int rtcSetOpenCallback(int id, rtcOpenCallbackFunc cb);
	/**
	 * Original signature : <code>int rtcSetClosedCallback(int, rtcClosedCallbackFunc)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:172</i>
	 */
	int rtcSetClosedCallback(int id, rtcClosedCallbackFunc cb);
	/**
	 * Original signature : <code>int rtcSetErrorCallback(int, rtcErrorCallbackFunc)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:174</i>
	 */
	int rtcSetErrorCallback(int id, rtcErrorCallbackFunc cb);
	/**
	 * Original signature : <code>int rtcSetMessageCallback(int, rtcMessageCallbackFunc)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:176</i>
	 */
	int rtcSetMessageCallback(int id, rtcMessageCallbackFunc cb);
	/**
	 * Original signature : <code>int rtcSendMessage(int, const char*, int)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:178</i><br>
	 * @deprecated use the safer methods {@link #rtcSendMessage(int, String, int)} and {@link #rtcSendMessage(int, Pointer, int)} instead
	 */
	@Deprecated 
	int rtcSendMessage(int id, Pointer data, int size);
	/**
	 * Original signature : <code>int rtcSendMessage(int, const char*, int)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:178</i>
	 */
	int rtcSendMessage(int id, String data, int size);
	/**
	 * Original signature : <code>int rtcClose(int)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:180</i>
	 */
	int rtcClose(int id);
	/**
	 * Original signature : <code>int rtcDelete(int)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:182</i>
	 */
	int rtcDelete(int id);
	/**
	 * Original signature : <code>bool rtcIsOpen(int)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:184</i>
	 */
	byte rtcIsOpen(int id);
	/**
	 * Original signature : <code>bool rtcIsClosed(int)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:186</i>
	 */
	byte rtcIsClosed(int id);
	/**
	 * Original signature : <code>int rtcMaxMessageSize(int)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:188</i>
	 */
	int rtcMaxMessageSize(int id);
	/**
	 * total size buffered to send<br>
	 * Original signature : <code>int rtcGetBufferedAmount(int)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:193</i>
	 */
	int rtcGetBufferedAmount(int id);
	/**
	 * Original signature : <code>int rtcSetBufferedAmountLowThreshold(int, int)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:195</i>
	 */
	int rtcSetBufferedAmountLowThreshold(int id, int amount);
	/**
	 * Original signature : <code>int rtcSetBufferedAmountLowCallback(int, rtcBufferedAmountLowCallbackFunc)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:197</i>
	 */
	int rtcSetBufferedAmountLowCallback(int id, rtcBufferedAmountLowCallbackFunc cb);
	/**
	 * DataChannel, Track, and WebSocket common extended API<br>
	 * total size available to receive<br>
	 * Original signature : <code>int rtcGetAvailableAmount(int)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:203</i>
	 */
	int rtcGetAvailableAmount(int id);
	/**
	 * Original signature : <code>int rtcSetAvailableCallback(int, rtcAvailableCallbackFunc)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:205</i>
	 */
	int rtcSetAvailableCallback(int id, rtcAvailableCallbackFunc cb);
	/**
	 * Original signature : <code>int rtcReceiveMessage(int, char*, int*)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:207</i><br>
	 * @deprecated use the safer methods {@link #rtcReceiveMessage(int, ByteBuffer, IntBuffer)} and {@link #rtcReceiveMessage(int, Pointer, IntByReference)} instead
	 */
	@Deprecated 
	int rtcReceiveMessage(int id, Pointer buffer, IntByReference size);
	/**
	 * Original signature : <code>int rtcReceiveMessage(int, char*, int*)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:207</i>
	 */
	int rtcReceiveMessage(int id, ByteBuffer buffer, IntBuffer size);
	/**
	 * Original signature : <code>int rtcSetDataChannelCallback(int, rtcDataChannelCallbackFunc)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:227</i>
	 */
	int rtcSetDataChannelCallback(int pc, rtcDataChannelCallbackFunc cb);
	/**
	 * returns dc id<br>
	 * Original signature : <code>int rtcCreateDataChannel(int, const char*)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:232</i><br>
	 * @deprecated use the safer methods {@link #rtcCreateDataChannel(int, String)} and {@link #rtcCreateDataChannel(int, Pointer)} instead
	 */
	@Deprecated 
	int rtcCreateDataChannel(int pc, Pointer label);
	/**
	 * returns dc id<br>
	 * Original signature : <code>int rtcCreateDataChannel(int, const char*)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:232</i>
	 */
	int rtcCreateDataChannel(int pc, String label);
	/**
	 * Original signature : <code>int rtcCreateDataChannelEx(int, const char*, const rtcDataChannelInit*)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:234</i><br>
	 * @deprecated use the safer methods {@link #rtcCreateDataChannelEx(int, String, rtcDataChannelInit)} and {@link #rtcCreateDataChannelEx(int, Pointer, rtcDataChannelInit)} instead
	 */
	@Deprecated 
	int rtcCreateDataChannelEx(int pc, Pointer label, rtcDataChannelInit init);
	/**
	 * Original signature : <code>int rtcCreateDataChannelEx(int, const char*, const rtcDataChannelInit*)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:234</i>
	 */
	int rtcCreateDataChannelEx(int pc, String label, rtcDataChannelInit init);
	/**
	 * Original signature : <code>int rtcDeleteDataChannel(int)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:236</i>
	 */
	int rtcDeleteDataChannel(int dc);
	/**
	 * Original signature : <code>int rtcGetDataChannelStream(int)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:238</i>
	 */
	int rtcGetDataChannelStream(int dc);
	/**
	 * Original signature : <code>int rtcGetDataChannelLabel(int, char*, int)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:240</i><br>
	 * @deprecated use the safer methods {@link #rtcGetDataChannelLabel(int, ByteBuffer, int)} and {@link #rtcGetDataChannelLabel(int, Pointer, int)} instead
	 */
	@Deprecated 
	int rtcGetDataChannelLabel(int dc, Pointer buffer, int size);
	/**
	 * Original signature : <code>int rtcGetDataChannelLabel(int, char*, int)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:240</i>
	 */
	int rtcGetDataChannelLabel(int dc, ByteBuffer buffer, int size);
	/**
	 * Original signature : <code>int rtcGetDataChannelProtocol(int, char*, int)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:242</i><br>
	 * @deprecated use the safer methods {@link #rtcGetDataChannelProtocol(int, ByteBuffer, int)} and {@link #rtcGetDataChannelProtocol(int, Pointer, int)} instead
	 */
	@Deprecated 
	int rtcGetDataChannelProtocol(int dc, Pointer buffer, int size);
	/**
	 * Original signature : <code>int rtcGetDataChannelProtocol(int, char*, int)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:242</i>
	 */
	int rtcGetDataChannelProtocol(int dc, ByteBuffer buffer, int size);
	/**
	 * Original signature : <code>int rtcGetDataChannelReliability(int, rtcReliability*)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:244</i>
	 */
	int rtcGetDataChannelReliability(int dc, rtcReliability reliability);
	/**
	 * Original signature : <code>int rtcSetTrackCallback(int, rtcTrackCallbackFunc)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:262</i>
	 */
	int rtcSetTrackCallback(int pc, rtcTrackCallbackFunc cb);
	/**
	 * returns tr id<br>
	 * Original signature : <code>int rtcAddTrack(int, const char*)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:267</i><br>
	 * @deprecated use the safer methods {@link #rtcAddTrack(int, String)} and {@link #rtcAddTrack(int, Pointer)} instead
	 */
	@Deprecated 
	int rtcAddTrack(int pc, Pointer mediaDescriptionSdp);
	/**
	 * returns tr id<br>
	 * Original signature : <code>int rtcAddTrack(int, const char*)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:267</i>
	 */
	int rtcAddTrack(int pc, String mediaDescriptionSdp);
	/**
	 * returns tr id<br>
	 * Original signature : <code>int rtcAddTrackEx(int, const rtcTrackInit*)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:272</i>
	 */
	int rtcAddTrackEx(int pc, rtcTrackInit init);
	/**
	 * Original signature : <code>int rtcDeleteTrack(int)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:274</i>
	 */
	int rtcDeleteTrack(int tr);
	/**
	 * Original signature : <code>int rtcGetTrackDescription(int, char*, int)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:276</i><br>
	 * @deprecated use the safer methods {@link #rtcGetTrackDescription(int, ByteBuffer, int)} and {@link #rtcGetTrackDescription(int, Pointer, int)} instead
	 */
	@Deprecated 
	int rtcGetTrackDescription(int tr, Pointer buffer, int size);
	/**
	 * Original signature : <code>int rtcGetTrackDescription(int, char*, int)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:276</i>
	 */
	int rtcGetTrackDescription(int tr, ByteBuffer buffer, int size);
	/**
	 * Original signature : <code>int rtcGetTrackMid(int, char*, int)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:278</i><br>
	 * @deprecated use the safer methods {@link #rtcGetTrackMid(int, ByteBuffer, int)} and {@link #rtcGetTrackMid(int, Pointer, int)} instead
	 */
	@Deprecated 
	int rtcGetTrackMid(int tr, Pointer buffer, int size);
	/**
	 * Original signature : <code>int rtcGetTrackMid(int, char*, int)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:278</i>
	 */
	int rtcGetTrackMid(int tr, ByteBuffer buffer, int size);
	/**
	 * Original signature : <code>int rtcGetTrackDirection(int, rtcDirection*)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:280</i><br>
	 * @deprecated use the safer methods {@link #rtcGetTrackDirection(int, IntBuffer)} and {@link #rtcGetTrackDirection(int, IntByReference)} instead
	 */
	@Deprecated 
	int rtcGetTrackDirection(int tr, IntByReference direction);
	/**
	 * Original signature : <code>int rtcGetTrackDirection(int, rtcDirection*)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:280</i>
	 */
	int rtcGetTrackDirection(int tr, IntBuffer direction);
	/**
	 * Original signature : <code>int rtcRequestKeyframe(int)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:282</i>
	 */
	int rtcRequestKeyframe(int tr);
	/**
	 * Original signature : <code>int rtcRequestBitrate(int, unsigned int)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:284</i>
	 */
	int rtcRequestBitrate(int tr, int bitrate);
	/**
	 * explicitly returned by a media interceptor callback;<br>
	 * Original signature : <code>rtcMessage* rtcCreateOpaqueMessage(void*, int)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:335</i>
	 */
	PointerByReference rtcCreateOpaqueMessage(Pointer data, int size);
	/**
	 * Original signature : <code>void rtcDeleteOpaqueMessage(rtcMessage*)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:337</i>
	 */
	void rtcDeleteOpaqueMessage(PointerByReference msg);
	/**
	 * Set MediaInterceptor on peer connection<br>
	 * Original signature : <code>int rtcSetMediaInterceptorCallback(int, rtcInterceptorCallbackFunc)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:342</i>
	 */
	int rtcSetMediaInterceptorCallback(int id, rtcInterceptorCallbackFunc cb);
	/**
	 * Set a packetizer on track<br>
	 * Original signature : <code>int rtcSetH264Packetizer(int, const rtcPacketizerInit*)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:347</i>
	 */
	int rtcSetH264Packetizer(int tr, rtcPacketizerInit init);
	/**
	 * Original signature : <code>int rtcSetH265Packetizer(int, const rtcPacketizerInit*)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:349</i>
	 */
	int rtcSetH265Packetizer(int tr, rtcPacketizerInit init);
	/**
	 * Original signature : <code>int rtcSetAV1Packetizer(int, const rtcPacketizerInit*)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:351</i>
	 */
	int rtcSetAV1Packetizer(int tr, rtcPacketizerInit init);
	/**
	 * Original signature : <code>int rtcSetOpusPacketizer(int, const rtcPacketizerInit*)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:353</i>
	 */
	int rtcSetOpusPacketizer(int tr, rtcPacketizerInit init);
	/**
	 * Original signature : <code>int rtcSetAACPacketizer(int, const rtcPacketizerInit*)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:355</i>
	 */
	int rtcSetAACPacketizer(int tr, rtcPacketizerInit init);
	/**
	 * Chain RtcpReceivingSession on track<br>
	 * Original signature : <code>int rtcChainRtcpReceivingSession(int)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:383</i>
	 */
	int rtcChainRtcpReceivingSession(int tr);
	/**
	 * Chain RtcpSrReporter on track<br>
	 * Original signature : <code>int rtcChainRtcpSrReporter(int)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:388</i>
	 */
	int rtcChainRtcpSrReporter(int tr);
	/**
	 * Chain RtcpNackResponder on track<br>
	 * Original signature : <code>int rtcChainRtcpNackResponder(int, unsigned int)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:393</i>
	 */
	int rtcChainRtcpNackResponder(int tr, int maxStoredPacketsCount);
	/**
	 * Chain PliHandler on track<br>
	 * Original signature : <code>int rtcChainPliHandler(int, rtcPliHandlerCallbackFunc)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:398</i>
	 */
	int rtcChainPliHandler(int tr, rtcPliHandlerCallbackFunc cb);
	/**
	 * Transform seconds to timestamp using track's clock rate, result is written to timestamp<br>
	 * Original signature : <code>int rtcTransformSecondsToTimestamp(int, double, uint32_t*)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:403</i><br>
	 * @deprecated use the safer methods {@link #rtcTransformSecondsToTimestamp(int, double, IntBuffer)} and {@link #rtcTransformSecondsToTimestamp(int, double, IntByReference)} instead
	 */
	@Deprecated 
	int rtcTransformSecondsToTimestamp(int id, double seconds, IntByReference timestamp);
	/**
	 * Transform seconds to timestamp using track's clock rate, result is written to timestamp<br>
	 * Original signature : <code>int rtcTransformSecondsToTimestamp(int, double, uint32_t*)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:403</i>
	 */
	int rtcTransformSecondsToTimestamp(int id, double seconds, IntBuffer timestamp);
	/**
	 * Transform timestamp to seconds using track's clock rate, result is written to seconds<br>
	 * Original signature : <code>int rtcTransformTimestampToSeconds(int, uint32_t, double*)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:408</i><br>
	 * @deprecated use the safer methods {@link #rtcTransformTimestampToSeconds(int, int, DoubleBuffer)} and {@link #rtcTransformTimestampToSeconds(int, int, DoubleByReference)} instead
	 */
	@Deprecated 
	int rtcTransformTimestampToSeconds(int id, int timestamp, DoubleByReference seconds);
	/**
	 * Transform timestamp to seconds using track's clock rate, result is written to seconds<br>
	 * Original signature : <code>int rtcTransformTimestampToSeconds(int, uint32_t, double*)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:408</i>
	 */
	int rtcTransformTimestampToSeconds(int id, int timestamp, DoubleBuffer seconds);
	/**
	 * Get current timestamp, result is written to timestamp<br>
	 * Original signature : <code>int rtcGetCurrentTrackTimestamp(int, uint32_t*)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:413</i><br>
	 * @deprecated use the safer methods {@link #rtcGetCurrentTrackTimestamp(int, IntBuffer)} and {@link #rtcGetCurrentTrackTimestamp(int, IntByReference)} instead
	 */
	@Deprecated 
	int rtcGetCurrentTrackTimestamp(int id, IntByReference timestamp);
	/**
	 * Get current timestamp, result is written to timestamp<br>
	 * Original signature : <code>int rtcGetCurrentTrackTimestamp(int, uint32_t*)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:413</i>
	 */
	int rtcGetCurrentTrackTimestamp(int id, IntBuffer timestamp);
	/**
	 * Set RTP timestamp for track identified by given id<br>
	 * Original signature : <code>int rtcSetTrackRtpTimestamp(int, uint32_t)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:418</i>
	 */
	int rtcSetTrackRtpTimestamp(int id, int timestamp);
	/**
	 * Get timestamp of last RTCP SR, result is written to timestamp<br>
	 * Original signature : <code>int rtcGetLastTrackSenderReportTimestamp(int, uint32_t*)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:423</i><br>
	 * @deprecated use the safer methods {@link #rtcGetLastTrackSenderReportTimestamp(int, IntBuffer)} and {@link #rtcGetLastTrackSenderReportTimestamp(int, IntByReference)} instead
	 */
	@Deprecated 
	int rtcGetLastTrackSenderReportTimestamp(int id, IntByReference timestamp);
	/**
	 * Get timestamp of last RTCP SR, result is written to timestamp<br>
	 * Original signature : <code>int rtcGetLastTrackSenderReportTimestamp(int, uint32_t*)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:423</i>
	 */
	int rtcGetLastTrackSenderReportTimestamp(int id, IntBuffer timestamp);
	/**
	 * Set NeedsToReport flag in RtcpSrReporter handler identified by given track id<br>
	 * Original signature : <code>int rtcSetNeedsToSendRtcpSr(int)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:428</i>
	 */
	int rtcSetNeedsToSendRtcpSr(int id);
	/**
	 * buffer is NULL<br>
	 * Original signature : <code>int rtcGetTrackPayloadTypesForCodec(int, const char*, int*, int)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:433</i><br>
	 * @deprecated use the safer methods {@link #rtcGetTrackPayloadTypesForCodec(int, String, IntBuffer, int)} and {@link #rtcGetTrackPayloadTypesForCodec(int, Pointer, IntByReference, int)} instead
	 */
	@Deprecated 
	int rtcGetTrackPayloadTypesForCodec(int tr, Pointer ccodec, IntByReference buffer, int size);
	/**
	 * buffer is NULL<br>
	 * Original signature : <code>int rtcGetTrackPayloadTypesForCodec(int, const char*, int*, int)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:433</i>
	 */
	int rtcGetTrackPayloadTypesForCodec(int tr, String ccodec, IntBuffer buffer, int size);
	/**
	 * Get all SSRCs for given track<br>
	 * Original signature : <code>int rtcGetSsrcsForTrack(int, uint32_t*, int)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:438</i><br>
	 * @deprecated use the safer methods {@link #rtcGetSsrcsForTrack(int, IntBuffer, int)} and {@link #rtcGetSsrcsForTrack(int, IntByReference, int)} instead
	 */
	@Deprecated 
	int rtcGetSsrcsForTrack(int tr, IntByReference buffer, int count);
	/**
	 * Get all SSRCs for given track<br>
	 * Original signature : <code>int rtcGetSsrcsForTrack(int, uint32_t*, int)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:438</i>
	 */
	int rtcGetSsrcsForTrack(int tr, IntBuffer buffer, int count);
	/**
	 * Get CName for SSRC<br>
	 * Original signature : <code>int rtcGetCNameForSsrc(int, uint32_t, char*, int)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:443</i><br>
	 * @deprecated use the safer methods {@link #rtcGetCNameForSsrc(int, int, ByteBuffer, int)} and {@link #rtcGetCNameForSsrc(int, int, Pointer, int)} instead
	 */
	@Deprecated 
	int rtcGetCNameForSsrc(int tr, int ssrc, Pointer cname, int cnameSize);
	/**
	 * Get CName for SSRC<br>
	 * Original signature : <code>int rtcGetCNameForSsrc(int, uint32_t, char*, int)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:443</i>
	 */
	int rtcGetCNameForSsrc(int tr, int ssrc, ByteBuffer cname, int cnameSize);
	/**
	 * Get all SSRCs for given media type in given SDP<br>
	 * Original signature : <code>int rtcGetSsrcsForType(const char*, const char*, uint32_t*, int)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:448</i><br>
	 * @deprecated use the safer methods {@link #rtcGetSsrcsForType(String, String, IntBuffer, int)} and {@link #rtcGetSsrcsForType(Pointer, Pointer, IntByReference, int)} instead
	 */
	@Deprecated 
	int rtcGetSsrcsForType(Pointer mediaType, Pointer sdp, IntByReference buffer, int bufferSize);
	/**
	 * Get all SSRCs for given media type in given SDP<br>
	 * Original signature : <code>int rtcGetSsrcsForType(const char*, const char*, uint32_t*, int)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:448</i>
	 */
	int rtcGetSsrcsForType(String mediaType, String sdp, IntBuffer buffer, int bufferSize);
	/**
	 * Set SSRC for given media type in given SDP<br>
	 * Original signature : <code>int rtcSetSsrcForType(const char*, const char*, char*, const int, rtcSsrcForTypeInit*)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:453</i><br>
	 * @deprecated use the safer methods {@link #rtcSetSsrcForType(String, String, ByteBuffer, int, rtcSsrcForTypeInit)} and {@link #rtcSetSsrcForType(Pointer, Pointer, Pointer, int, rtcSsrcForTypeInit)} instead
	 */
	@Deprecated 
	int rtcSetSsrcForType(Pointer mediaType, Pointer sdp, Pointer buffer, int bufferSize, rtcSsrcForTypeInit init);
	/**
	 * Set SSRC for given media type in given SDP<br>
	 * Original signature : <code>int rtcSetSsrcForType(const char*, const char*, char*, const int, rtcSsrcForTypeInit*)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:453</i>
	 */
	int rtcSetSsrcForType(String mediaType, String sdp, ByteBuffer buffer, int bufferSize, rtcSsrcForTypeInit init);
	/**
	 * returns ws id<br>
	 * Original signature : <code>int rtcCreateWebSocket(const char*)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:475</i><br>
	 * @deprecated use the safer methods {@link #rtcCreateWebSocket(String)} and {@link #rtcCreateWebSocket(Pointer)} instead
	 */
	@Deprecated 
	int rtcCreateWebSocket(Pointer url);
	/**
	 * returns ws id<br>
	 * Original signature : <code>int rtcCreateWebSocket(const char*)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:475</i>
	 */
	int rtcCreateWebSocket(String url);
	/**
	 * Original signature : <code>int rtcCreateWebSocketEx(const char*, const rtcWsConfiguration*)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:477</i><br>
	 * @deprecated use the safer methods {@link #rtcCreateWebSocketEx(String, rtcWsConfiguration)} and {@link #rtcCreateWebSocketEx(Pointer, rtcWsConfiguration)} instead
	 */
	@Deprecated 
	int rtcCreateWebSocketEx(Pointer url, rtcWsConfiguration config);
	/**
	 * Original signature : <code>int rtcCreateWebSocketEx(const char*, const rtcWsConfiguration*)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:477</i>
	 */
	int rtcCreateWebSocketEx(String url, rtcWsConfiguration config);
	/**
	 * Original signature : <code>int rtcDeleteWebSocket(int)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:479</i>
	 */
	int rtcDeleteWebSocket(int ws);
	/**
	 * Original signature : <code>int rtcGetWebSocketRemoteAddress(int, char*, int)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:481</i><br>
	 * @deprecated use the safer methods {@link #rtcGetWebSocketRemoteAddress(int, ByteBuffer, int)} and {@link #rtcGetWebSocketRemoteAddress(int, Pointer, int)} instead
	 */
	@Deprecated 
	int rtcGetWebSocketRemoteAddress(int ws, Pointer buffer, int size);
	/**
	 * Original signature : <code>int rtcGetWebSocketRemoteAddress(int, char*, int)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:481</i>
	 */
	int rtcGetWebSocketRemoteAddress(int ws, ByteBuffer buffer, int size);
	/**
	 * Original signature : <code>int rtcGetWebSocketPath(int, char*, int)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:483</i><br>
	 * @deprecated use the safer methods {@link #rtcGetWebSocketPath(int, ByteBuffer, int)} and {@link #rtcGetWebSocketPath(int, Pointer, int)} instead
	 */
	@Deprecated 
	int rtcGetWebSocketPath(int ws, Pointer buffer, int size);
	/**
	 * Original signature : <code>int rtcGetWebSocketPath(int, char*, int)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:483</i>
	 */
	int rtcGetWebSocketPath(int ws, ByteBuffer buffer, int size);
	/**
	 * Original signature : <code>int rtcCreateWebSocketServer(const rtcWsServerConfiguration*, rtcWebSocketClientCallbackFunc)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:505</i>
	 */
	int rtcCreateWebSocketServer(rtcWsServerConfiguration config, rtcWebSocketClientCallbackFunc cb);
	/**
	 * Original signature : <code>int rtcDeleteWebSocketServer(int)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:507</i>
	 */
	int rtcDeleteWebSocketServer(int wsserver);
	/**
	 * Original signature : <code>int rtcGetWebSocketServerPort(int)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:509</i>
	 */
	int rtcGetWebSocketServerPort(int wsserver);
	/**
	 * Optional global preload and cleanup<br>
	 * Original signature : <code>void rtcPreload()</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:514</i>
	 */
	void rtcPreload();
	/**
	 * Original signature : <code>void rtcCleanup()</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:516</i>
	 */
	void rtcCleanup();
	/**
	 * Note: SCTP settings apply to newly-created PeerConnections only<br>
	 * Original signature : <code>int rtcSetSctpSettings(const rtcSctpSettings*)</code><br>
	 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:548</i>
	 */
	int rtcSetSctpSettings(rtcSctpSettings settings);
}
