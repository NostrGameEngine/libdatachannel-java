package generated;
import com.sun.jna.Pointer;
import com.sun.jna.Structure;

import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:225</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class rtcDataChannelInit extends Structure {
	/** C type : rtcReliability */
	public rtcReliability reliability;
	/**
	 * empty string if NULL<br>
	 * C type : const char*
	 */
	public Pointer protocol;
	public byte negotiated;
	public byte manualStream;
	/** numeric ID 0-65534, ignored if manualStream is false */
	public short stream;
	public rtcDataChannelInit() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("reliability", "protocol", "negotiated", "manualStream", "stream");
	}
	/**
	 * @param reliability C type : rtcReliability<br>
	 * @param protocol empty string if NULL<br>
	 * C type : const char*<br>
	 * @param stream numeric ID 0-65534, ignored if manualStream is false
	 */
	public rtcDataChannelInit(rtcReliability reliability, Pointer protocol, byte negotiated, byte manualStream, short stream) {
		super();
		this.reliability = reliability;
		this.protocol = protocol;
		this.negotiated = negotiated;
		this.manualStream = manualStream;
		this.stream = stream;
	}
	public rtcDataChannelInit(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends rtcDataChannelInit implements Structure.ByReference {
		
	};
	public static class ByValue extends rtcDataChannelInit implements Structure.ByValue {
		
	};
}
