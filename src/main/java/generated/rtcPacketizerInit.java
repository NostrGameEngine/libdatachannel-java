package generated;

import com.sun.jna.Pointer;
import com.sun.jna.Structure;

import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:317</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class rtcPacketizerInit extends Structure {
	public int ssrc;
	/** C type : const char* */
	public Pointer cname;
	public byte payloadType;
	public int clockRate;
	public short sequenceNumber;
	public int timestamp;
	/** Maximum fragment size, 0 means default */
	public short maxFragmentSize;
	/**
	 * @see rtcNalUnitSeparator<br>
	 * NAL unit separator<br>
	 * C type : rtcNalUnitSeparator
	 */
	public int nalSeparator;
	/**
	 * @see rtcObuPacketization<br>
	 * OBU paketization for AV1 samples<br>
	 * C type : rtcObuPacketization
	 */
	public int obuPacketization;
	public byte playoutDelayId;
	public short playoutDelayMin;
	public short playoutDelayMax;
	public rtcPacketizerInit() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("ssrc", "cname", "payloadType", "clockRate", "sequenceNumber", "timestamp", "maxFragmentSize", "nalSeparator", "obuPacketization", "playoutDelayId", "playoutDelayMin", "playoutDelayMax");
	}
	public rtcPacketizerInit(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends rtcPacketizerInit implements Structure.ByReference {
		
	};
	public static class ByValue extends rtcPacketizerInit implements Structure.ByValue {
		
	};
}
