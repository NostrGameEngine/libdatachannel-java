package generated;

import com.sun.jna.Pointer;
import com.sun.jna.Structure;

import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:543</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class rtcSctpSettings extends Structure {
	/** in bytes, <= 0 means optimized default */
	public int recvBufferSize;
	/** in bytes, <= 0 means optimized default */
	public int sendBufferSize;
	/** in chunks, <= 0 means optimized default */
	public int maxChunksOnQueue;
	/** in MTUs, <= 0 means optimized default */
	public int initialCongestionWindow;
	/** in MTUs, 0 means optimized default, < 0 means disabled */
	public int maxBurst;
	/** 0: RFC2581 (default), 1: HSTCP, 2: H-TCP, 3: RTCC */
	public int congestionControlModule;
	/** in milliseconds, 0 means optimized default, < 0 means disabled */
	public int delayedSackTimeMs;
	/** in milliseconds, <= 0 means optimized default */
	public int minRetransmitTimeoutMs;
	/** in milliseconds, <= 0 means optimized default */
	public int maxRetransmitTimeoutMs;
	/** in milliseconds, <= 0 means optimized default */
	public int initialRetransmitTimeoutMs;
	/** number of retransmissions, <= 0 means optimized default */
	public int maxRetransmitAttempts;
	/** in milliseconds, <= 0 means optimized default */
	public int heartbeatIntervalMs;
	public rtcSctpSettings() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("recvBufferSize", "sendBufferSize", "maxChunksOnQueue", "initialCongestionWindow", "maxBurst", "congestionControlModule", "delayedSackTimeMs", "minRetransmitTimeoutMs", "maxRetransmitTimeoutMs", "initialRetransmitTimeoutMs", "maxRetransmitAttempts", "heartbeatIntervalMs");
	}
	public rtcSctpSettings(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends rtcSctpSettings implements Structure.ByReference {
		
	};
	public static class ByValue extends rtcSctpSettings implements Structure.ByValue {
		
	};
}
