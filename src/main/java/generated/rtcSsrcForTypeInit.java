package generated;

import com.sun.jna.Pointer;
import com.sun.jna.Structure;

import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:328</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class rtcSsrcForTypeInit extends Structure {
	public int ssrc;
	/**
	 * optional<br>
	 * C type : const char*
	 */
	public Pointer name;
	/**
	 * optional<br>
	 * C type : const char*
	 */
	public Pointer msid;
	/**
	 * optional, track ID used in MSID<br>
	 * C type : const char*
	 */
	public Pointer trackId;
	public rtcSsrcForTypeInit() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("ssrc", "name", "msid", "trackId");
	}
	/**
	 * @param name optional<br>
	 * C type : const char*<br>
	 * @param msid optional<br>
	 * C type : const char*<br>
	 * @param trackId optional, track ID used in MSID<br>
	 * C type : const char*
	 */
	public rtcSsrcForTypeInit(int ssrc, Pointer name, Pointer msid, Pointer trackId) {
		super();
		this.ssrc = ssrc;
		this.name = name;
		this.msid = msid;
		this.trackId = trackId;
	}
	public rtcSsrcForTypeInit(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends rtcSsrcForTypeInit implements Structure.ByReference {
		
	};
	public static class ByValue extends rtcSsrcForTypeInit implements Structure.ByValue {
		
	};
}
