package generated;

import com.sun.jna.Pointer;
import com.sun.jna.Structure;

import java.util.Arrays;
import java.util.List;
/**
 * <i>native declaration : /home/phillip/Code/libdatachannel-java/libdatachannel/include/rtc/rtc.h:503</i><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public class rtcWsServerConfiguration extends Structure {
	/** 0 means automatic selection */
	public short port;
	/** if true, enable TLS (WSS) */
	public byte enableTls;
	/**
	 * NULL for autogenerated certificate<br>
	 * C type : const char*
	 */
	public Pointer certificatePemFile;
	/**
	 * NULL for autogenerated certificate<br>
	 * C type : const char*
	 */
	public Pointer keyPemFile;
	/**
	 * NULL if no pass<br>
	 * C type : const char*
	 */
	public Pointer keyPemPass;
	/**
	 * NULL for any<br>
	 * C type : const char*
	 */
	public Pointer bindAddress;
	/** in milliseconds, 0 means default, < 0 means disabled */
	public int connectionTimeoutMs;
	/** <= 0 means default */
	public int maxMessageSize;
	public rtcWsServerConfiguration() {
		super();
	}
	protected List<String> getFieldOrder() {
		return Arrays.asList("port", "enableTls", "certificatePemFile", "keyPemFile", "keyPemPass", "bindAddress", "connectionTimeoutMs", "maxMessageSize");
	}
	/**
	 * @param port 0 means automatic selection<br>
	 * @param enableTls if true, enable TLS (WSS)<br>
	 * @param certificatePemFile NULL for autogenerated certificate<br>
	 * C type : const char*<br>
	 * @param keyPemFile NULL for autogenerated certificate<br>
	 * C type : const char*<br>
	 * @param keyPemPass NULL if no pass<br>
	 * C type : const char*<br>
	 * @param bindAddress NULL for any<br>
	 * C type : const char*<br>
	 * @param connectionTimeoutMs in milliseconds, 0 means default, < 0 means disabled<br>
	 * @param maxMessageSize <= 0 means default
	 */
	public rtcWsServerConfiguration(short port, byte enableTls, Pointer certificatePemFile, Pointer keyPemFile, Pointer keyPemPass, Pointer bindAddress, int connectionTimeoutMs, int maxMessageSize) {
		super();
		this.port = port;
		this.enableTls = enableTls;
		this.certificatePemFile = certificatePemFile;
		this.keyPemFile = keyPemFile;
		this.keyPemPass = keyPemPass;
		this.bindAddress = bindAddress;
		this.connectionTimeoutMs = connectionTimeoutMs;
		this.maxMessageSize = maxMessageSize;
	}
	public rtcWsServerConfiguration(Pointer peer) {
		super(peer);
	}
	public static class ByReference extends rtcWsServerConfiguration implements Structure.ByReference {
		
	};
	public static class ByValue extends rtcWsServerConfiguration implements Structure.ByValue {
		
	};
}
